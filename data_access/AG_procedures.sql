-- Generated by Ora2Pg, the Oracle database Schema converter, version 13.0
-- Copyright 2000-2014 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=localhost;sid=webdevkl;port=1521

SET client_encoding TO 'UTF8';

\set ON_ERROR_STOP ON



CREATE OR REPLACE FUNCTION ag_add_animal_participant (
    ag_login_id_ uuid,
    participant_name_ text
)
 RETURNS VOID AS $body$
BEGIN
    -- new code written by Emily 
        BEGIN
        insert into ag_animal_survey (ag_login_id, participant_name) 
        values (ag_login_id_, participant_name_);
        EXCEPTION
            WHEN OTHERS THEN
                END;
end;
 /*
 begin;
 select ag_add_animal_participant(cast ('d8592c747da12135e0408a80115d6401' as uuid), 'fuzzy2');
 select ag_get_animal_participants(cast('d8592c747da12135e0408a80115d6401' as uuid), 'a'); 
fetch all in a;
delete from ag_animal_survey where ag_login_id = cast ('d8592c747da12135e0408a80115d6401' as uuid) and participant_name ='fuzzy2';
 commit;
 */
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_add_participant (
    ag_login_id_ uuid,
    participant_name_ text
)
 RETURNS VOID AS $body$
BEGIN
  -- new code written by Emily 
    BEGIN
        insert into ag_human_survey (ag_login_id, participant_name) 
        values (ag_login_id_, participant_name_);
    EXCEPTION
        WHEN OTHERS THEN 
            END;
end;
 /*
 begin;
 select ag_add_participant(cast ('d8592c747da12135e0408a80115d6401' as uuid), 'sp_test');
 select ag_get_human_participants(cast('d8592c747da12135e0408a80115d6401' as uuid), 'a'); 
fetch all in a;
delete from ag_human_survey where ag_login_id = cast ('d8592c747da12135e0408a80115d6401' as uuid) and participant_name ='sp_test';
 commit;
 */
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_authenticate_user (
  ag_kit_id_ in text,
  kit_password_ in text,
  user_data in out refcursor
)
 RETURNS refcursor AS $body$
BEGIN

  open user_data for
    SELECT  cast(agl.ag_login_id as varchar(100)) as ag_login_id, 
            agl.email, agl.name, agl.address, agl.city,
            agl.state, agl.zip, agl.country
    from    ag_login agl
            inner join ag_kit agk
            on agl.ag_login_id = agk.ag_login_id
    where   agk.supplied_kit_id = ag_kit_id_
            and agk.kit_password = kit_password_;

end;
/*BEGIN;
emte4531=# select ag_authenticate_user('DctkP', 'z077$Wcz', 'a');
select all in a;
COMMIT;
*/

 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_available_barcodes (
    ag_login_id_ uuid,
    results_ in out refcursor
)
 RETURNS refcursor AS $body$
BEGIN

    open results_ for
        SELECT  akb.barcode 
        from    ag_kit_barcodes akb 
                inner join ag_kit ak 
                on akb.ag_kit_id = ak.ag_kit_id 
        where   ak.ag_login_id = ag_login_id_
                and ak.kit_verified = 'y'
                and coalesce(akb.sample_date::text, '') = '';

end;
 
 
$body$
LANGUAGE PLPGSQL;
/*
BEGIN;
select ag_available_barcodes(cast ('d8592c747da12135e0408a80115d6401' as uuid), 'a'); 
fetch all in a;
COMMIT;
*/




CREATE OR REPLACE FUNCTION ag_check_barcode_status (
    barcode_ in text,
    barcode_status_ refcursor
)
 RETURNS refcursor AS $body$
BEGIN

    open barcode_status_ for
        SELECT  akb.site_sampled, akb.sample_date, akb.sample_time,
                akb.moldy, akb.overloaded, akb.other, akb.other_text, akb.date_of_last_email,
                barcode.status, barcode.scan_date, barcode.sample_postmark_date,
                al.email, al.name
        from    ag_kit_barcodes akb
                inner join ag_kit ak
                on akb.ag_kit_id = ak.ag_kit_id
                inner join ag_login al
                on ak.ag_login_id = al.ag_login_id
                inner join barcode
                on akb.barcode = barcode.barcode
        where   akb.barcode = barcode_;
        return barcode_status_;
end;
/*
begin;
select ag_check_barcode_status('000001056', 'a');
fetch all in a;
coomit;
*/
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_delete_participant (
    ag_login_id_ uuid,
    participant_name_ text
)
 RETURNS VOID AS $body$
BEGIN

    -- Remove the backup log
    delete from  ag_survey_answer
    where   ag_login_id = ag_login_id_
            and participant_name = participant_name_;
    
    -- Remove the multiple answers
    delete from  ag_survey_multiples
    where   ag_login_id = ag_login_id_
            and participant_name = participant_name_;
    -- Remove the participant/survey/consent
    delete from  ag_human_survey
    where   ag_login_id = ag_login_id_
            and participant_name = participant_name_;
    -- Remove the participant/survey/consent if they are an animal
    delete from  ag_animal_survey
    where   ag_login_id = ag_login_id_
            and participant_name = participant_name_;
end;
 /*begin;
 insert into ag_human_survey (ag_login_id, participant_name) values (cast ('d8592c747da12135e0408a80115d6401' as uuid), 'sp_test');
select ag_delete_participant(cast ('d8592c747da12135e0408a80115d6401' as uuid), 'sp_test');
select ag_get_human_participants(cast('d8592c747da12135e0408a80115d6401' as uuid), 'a'); 
fetch all in a;
*/
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_delete_sample (
    barcode_ text,
    ag_login_id_ uuid
)
 RETURNS VOID AS $body$
BEGIN

    -- Delete the associated samples
    update  ag_kit_barcodes
    set     participant_name = '',
            site_sampled = '',
            sample_time = '',
            sample_date = '',
            environment_sampled = '',
            notes = ''
    where   barcode in
            (
                SELECT  akb.barcode
                from    ag_kit_barcodes akb
                        inner join ag_kit ak
                        on akb.ag_kit_id = ak.ag_kit_id
                where   ak.ag_login_id = ag_login_id_
                        and akb.barcode = barcode_
            );
            
    update  barcode
    set     status = ''
    where   barcode = barcode_;
end;
/*
begin;
update ag_kit_barcodes set site_sampled = 'Stool', sample_date = '07/30/2014', participant_name = 'test', sample_time = '9:30 AM' where barcode = '000010860';
select * from ag_kit_barcodes where barcode = '000010860';
select ag_delete_sample ('000010860', cast('d8592c747da12135e0408a80115d6401' as uuid));
select * from ag_kit_barcodes where barcode = '000010860';
commit;
*/ 

$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_delete_survey_answer (
  ag_login_id_ uuid,
  participant_name_ in text
)
 RETURNS VOID AS $body$
BEGIN
  delete from ag_survey_answer
  where ag_login_id = ag_login_id_ and participant_name = participant_name_;
end;
 /*
 begin;
 insert into ag_survey_answer(ag_login_id, participant_name, question, answer) values (cast('d8592c747da12135e0408a80115d6401' as uuid), 'Emily2', 'race','Caucasian'), (cast('d8592c747da12135e0408a80115d6401' as uuid), 'Emily2', 'cat', 'yes');
select * from ag_survey_answer where ag_login_id = cast('d8592c747da12135e0408a80115d6401' as uuid) and participant_name = 'Emily2';
select ag_delete_survey_answer(cast('d8592c747da12135e0408a80115d6401' as uuid), 'Emily2');
select * from ag_survey_answer where ag_login_id = cast('d8592c747da12135e0408a80115d6401' as uuid) and participant_name = 'Emily2';
 commit;
 */
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_get_animal_participants (
    ag_login_id_ uuid,
    results_ in out refcursor
)
 RETURNS refcursor AS $body$
BEGIN

    open results_ for
        SELECT  participant_name
        from    ag_animal_survey
        where   ag_login_id = ag_login_id_;

end;
 /*
begin;
select ag_get_animal_participants(cast ('d8592c747da12135e0408a80115d6401' as uuid), 'a'); 
fetch all in a;
commit;
 */
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_get_barcodes (
    user_data_ refcursor
)
 RETURNS refcursor AS $body$
BEGIN

    open user_data_ for
        SELECT  barcode
        from    ag_kit_barcodes
        order by barcode;
    return user_data_;
end;
/*
begin;
select ag_get_barcodes('a');
fetch all in a;
commit;
*/ 
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_get_barcodes_by_kit (
  supplied_kit_id_ in text 
, results_  refcursor
)  RETURNS refcursor AS $body$
BEGIN
  open results_ for 
    SELECT b.barcode from ag_kit_barcodes b inner join ag_kit k on k.ag_kit_id =b.ag_kit_id 
      where k.supplied_kit_id = supplied_kit_id_;
  return results_;
       
end ;
/*
begin;
select ag_get_barcodes_by_kit('test', 'a');
fetch all in a;
commit;
*/

$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_get_barcodes_by_login (
    ag_login_id_ in uuid,
    user_data_ refcursor
)
 RETURNS refcursor AS $body$
BEGIN

    open user_data_ for
        SELECT  al.email, akb.ag_kit_barcode_id, akb.ag_kit_id, akb.barcode, 
                akb.site_sampled, akb.environment_sampled, akb.sample_date, 
                akb.sample_time, akb.participant_name, akb.notes
        from    ag_kit_barcodes akb
                inner join ag_kit ak
                on akb.ag_kit_id = ak.ag_kit_id
                inner join ag_login al
                on ak.ag_login_id = al.ag_login_id
        where   ak.ag_login_id = ag_login_id_;
    return user_data_;

end;
 /*
 begin;
select ag_get_barcodes_by_login(cast ('d8592c747da12135e0408a80115d6401' as uuid), 'a'); 
fetch all in a;
 commit;
 */
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_get_barcode_details (
    barcode_ in text,
    user_data_ refcursor
)
 RETURNS refcursor AS $body$
BEGIN

    open user_data_ for
        SELECT  al.email, 
                cast(akb.ag_kit_barcode_id as varchar(100)), 
                cast(akb.ag_kit_id as varchar(100)), 
                akb.barcode, 
                akb.site_sampled, akb.environment_sampled, akb.sample_date, 
                akb.sample_time, akb.participant_name, akb.notes
        from    ag_kit_barcodes akb
                inner join ag_kit ak
                on akb.ag_kit_id = ak.ag_kit_id
                inner join ag_login al
                on ak.ag_login_id = al.ag_login_id
        where   akb.barcode = barcode_;
    return user_data_;

end;
/*
begin;
select ag_get_barcode_details('000010860', 'a');
fetch all in a;
commit;
*/

$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_get_barcode_md_animal (
    barcode_ IN text,
    user_data_ refcursor
)
 RETURNS refcursor AS $body$
BEGIN

open user_data_ for
select akb.barcode as sample_name,
        akb.barcode as ANONYMIZED_NAME, 
        akb.sample_date as collection_date, 
        'y' as "public",
        0 as depth,
        'American Gut Project ' || aas."type" || ' sample' as DESCRIPTION,
        akb.sample_time, 
        0 as altitude, 
        'y' as assigned_from_geo,
        'American Gut Project' as TITLE,
        akb.site_sampled,
        
        md5(md5(cast(aas.ag_login_id as varchar(100)) ||
                          aas.participant_name)) as host_subject_id,
        
        case akb.site_sampled
            when 'Stool' then '749906'
            when 'Mouth' then '1227552'
            when 'Nares' then '1115523'
            when 'Ears' then '410656'
            when 'Fur' then '1338477'
            when 'Skin' then '1338477'
            when 'Please select...' then 'unknown'
            else akb.site_sampled
        end as TAXON_ID,
        case aas."type"
            when 'Dog' then '9615'
            when 'Cat' then '9685'
            when 'Bird' then '8782'
            when 'Fish' then '7777'
            when 'Small Mammal' then '40674'
            when 'Large Mammal' then '40674'
            when 'Reptile' then '8459'
            when 'Amphibian' then '8292'
            when 'Other' then '33208'
            else aas."type"
        end as host_taxid,
        case akb.site_sampled
            when 'Stool' then 'gut metagenome'
            when 'Mouth' then 'oral metagenome'
            when 'Nares' then 'upper respiratory metagenome'
            when 'Ears' then 'organismal metagenome'
            when 'Fur' then 'skin metagenome'
            when 'Skin' then 'skin metagenome'
            when 'Please select...' then 'unknown'
            else akb.site_sampled
        end as common_name,        
        aas."type" as host_common_name,
        case akb.site_sampled
            when 'Stool' then 'UBERON:feces'
            when 'Mouth' then 'UBERON:oral cavity'
            when 'Nares' then 'UBERON:nose'
            when 'Ears' then 'UBERON:ear'
            when 'Fur' then 'UBERON:fur'
            when 'Skin' then 'UBERON:skin'
            when 'Please select...' then 'unknown'
            else akb.site_sampled
        end as body_habitat, 
        case akb.site_sampled
            when 'Stool' then 'UBERON:feces'
            when 'Mouth' then 'UBERON:tongue'
            when 'Nares' then 'UBERON:nostril'
            when 'Ears' then 'UBERON:skin'
            when 'Fur' then 'UBERON:fur'
            when 'Skin' then 'UBERON:skin'
            when 'Please select...' then 'unknown'
            else akb.site_sampled
        end as body_site, 
        case akb.site_sampled
            when 'Stool' then 'UBERON:feces'
            when 'Mouth' then 'UBERON:saliva'
            when 'Nares' then 'UBERON:mucus'
            when 'Ears' then 'UBERON:cerumen'
            when 'Fur' then 'UBERON:sebum'
            when 'Skin' then 'UBERON:sebum'
            when 'Please select...' then 'unknown'
            else akb.site_sampled
        end as body_product, 
        case akb.site_sampled
            when 'Stool' then 'ENVO:urban biome'
            when 'Mouth' then 'ENVO:urban biome'
            when 'Nares' then 'ENVO:urban biome'
            when 'Ears' then 'ENVO:urban biome'
            when 'Fur' then 'ENVO:urban biome'
            when 'Skin' then 'ENVO:urban biome'
            when 'Please select...' then 'unknown'
            else akb.site_sampled
        end as env_biome, 
        case akb.site_sampled
            when 'Stool' then 'ENVO:animal-associated habitat'
            when 'Mouth' then 'ENVO:animal-associated habitat'
            when 'Nares' then 'ENVO:animal-associated habitat'
            when 'Ears' then 'ENVO:animal-associated habitat'
            when 'Fur' then 'ENVO:animal-associated habitat'
            when 'Skin' then 'ENVO:animal-associated habitat'
            when 'Please select...' then 'unknown'
            else akb.site_sampled
        end as env_feature, 
        case akb.site_sampled
            when 'Stool' then 'ENVO:feces'
            when 'Mouth' then 'ENVO:saliva'
            when 'Nares' then 'ENVO:mucus'
            when 'Ears' then 'ENVO:cerumen'
            when 'Fur' then 'ENVO:sebum'
            when 'Skin' then 'ENVO:mucus'
            when 'Please select...' then 'unknown'
            else akb.site_sampled
        end as env_matter,
        case
            when coalesce(city::text, '') = '' then 'unknown'
            else lower(city)
        end as city, 
        case
            when coalesce(state::text, '') = '' then 'unknown'
            else upper(state)
        end as state,
        case 
            when coalesce(zip::text, '') = '' then 'unknown'
            else zip
        end as zip,
        case 
            when lower(country) is null then 'unknown'
            when lower(country) = 'united states' then 'GAZ:United States of America'
            when lower(country) = 'united states of america' then 'GAZ:United States of America'
            when lower(country) = 'us' then 'GAZ:United States of America'
            when lower(country) = 'usa' then 'GAZ:United States of America'
            when lower(country) = 'u.s.a' then 'GAZ:United States of America'
            when lower(country) = 'u.s.' then 'GAZ:United States of America'
            when lower(country) = 'canada' then 'GAZ:Canada'
            when lower(country) = 'canadian' then 'GAZ:Canada'
            when lower(country) = 'ca' then 'GAZ:Canada'
            when lower(country) = 'australia' then 'GAZ:Australia'
            when lower(country) = 'au' then 'GAZ:Australia'
            when lower(country) = 'united kingdom' then 'GAZ:United Kingdom'
            when lower(country) = 'belgium' then 'GAZ:Belgium'
            when lower(country) = 'gb' then 'GAZ:Great Britain'
            when lower(country) = 'korea, republic of' then 'GAZ:South Korea'
            when lower(country) = 'nl' then 'GAZ:Netherlands'
            when lower(country) = 'netherlands' then 'GAZ:Netherlands'
            when lower(country) = 'spain' then 'GAZ:Spain'
            when lower(country) = 'es' then 'GAZ:Spain'
            when lower(country) = 'norway' then 'GAZ:Norway'
            when lower(country) = 'germany' then 'GAZ:Germany'
            when lower(country) = 'de' then 'GAZ:Germany'
            when lower(country) = 'china' then 'GAZ:China'
            when lower(country) = 'singapore' then 'GAZ:Singapore'
            when lower(country) = 'new zealand' then 'GAZ:New Zealand'
            when lower(country) = 'france' then 'GAZ:France'
            when lower(country) = 'fr' then 'GAZ:France'
            when lower(country) = 'ch' then 'GAZ:Switzerland'
            when lower(country) = 'switzerland' then 'GAZ:Switzerland'
            when lower(country) = 'denmark' then 'GAZ:Denmark'
            when lower(country) = 'scotland' then 'GAZ:Scotland'
            when lower(country) = 'united arab emirates' then 'GAZ:United Arab Emirates'
            when lower(country) = 'ireland' then 'GAZ:Ireland'
            else 'unknown'
        end as country,
        case
            when coalesce(al.latitude::text, '') = '' then 'unknown'
            else cast(al.latitude as varchar(100))
        end as latitude, 
        case
            when coalesce(al.longitude::text, '') = '' then 'unknown'
            else cast(al.longitude as varchar(100))
        end as longitude, 
        case
            when coalesce(al.elevation::text, '') = '' then 'unknown'
            else cast(al.elevation as varchar(100))
        end as elevation, 
        'years' as age_unit,
        aas.age,
        case
            when coalesce(GENDER::text, '') = '' then 'unknown'
            else lower(REPLACE(REPLACE(REPLACE(cast (GENDER as text), CHR(10), ''), CHR(13), ''), CHR(9), ''))
        end as sex,
        case
            when coalesce(aas.coprophage::text, '') = '' then 'unknown'
            else aas.coprophage
        end as coprophage,
        case
            when coalesce(aas.diet::text, '') = '' then 'unknown'
            else aas.diet
        end as diet,
        case
            when coalesce(aas.food_source_human::text, '') = '' then 'unknown'
            when aas.food_source_human = 'on' then 'yes'
        end as eats_human_food,
        case
            when coalesce(aas.food_source_store::text, '') = '' then 'unknown'
            when aas.food_source_store = 'on' then 'yes'
        end as eats_store_food,
        case
            when coalesce(aas.food_source_wild::text, '') = '' then 'unknown'
            when aas.food_source_wild = 'on' then 'yes'
        end as eats_wild_food,
        case
            when coalesce(aas.food_type::text, '') = '' then 'unknown'
            else aas.food_type
        end as food_type,
        case
            when coalesce(aas.grain_free_food::text, '') = '' then 'unknown'
            when aas.grain_free_food = 'on' then 'yes'
        end as eats_grain_free_food,
        case
            when coalesce(aas.organic_food::text, '') = '' then 'unknown'
            when aas.organic_food = 'on' then 'yes'
        end as eats_organic_food,
        case
            when coalesce(aas.living_status::text, '') = '' then 'unknown'
            else aas.living_status
        end as living_status,
        case
            when coalesce(aas.origin::text, '') = '' then 'unknown'
            else aas.origin
        end as origin,
        case
            when coalesce(aas.outside_time::text, '') = '' then 'unknown'
            when aas.outside_time = 'none' then '0'
            else aas.outside_time
        end as outside_time,
        case
            when coalesce(aas.setting::text, '') = '' then 'unknown'
            else aas.setting
        end as setting,
        case
            when coalesce(aas.toilet::text, '') = '' then 'uknown'
            else aas.toilet
        end as toile_water_access,
        case
            when coalesce(aas.weight::text, '') = '' then 'unknown'
            else aas.weight
        end as weight_class,

        -- multiples
        case
            when 
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'human/_%/_sex' escape '/'
            ) is null then 'unknown'
            else 
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'human/_%/_sex' escape '/'
            )
        end as human_sexes,

        case
            when 
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'human/_%/_age' escape '/'
            ) is null then 'unknown'
            else 
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'human/_%/_age' escape '/'
            )
        end as human_ages,

        case
            when 
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'pet/_%' escape '/'
            ) is null then 'unknown'
            else 
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'pet/_%' escape '/'
            )
        end as pets_cohoused
        
from    ag_login al
        inner join ag_kit ak
        on al.ag_login_id = ak.ag_login_id
        inner join ag_kit_barcodes akb
        on ak.ag_kit_id = akb.ag_kit_id
        inner join ag_animal_survey aas
        on al.ag_login_id = aas.ag_login_id
where   akb.participant_name = aas.participant_name
        and (akb.site_sampled IS NOT NULL AND akb.site_sampled::text <> '')
        and akb.site_sampled != 'Please Select...'
        and (akb.sample_date IS NOT NULL AND akb.sample_date::text <> '')
        and akb.barcode = barcode_;
return user_data_;
end;
/*
begin;
select ag_get_barcode_md_animal('000013395', 'a');
fetch all in a;
commit;
*/

$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_get_barcode_metadata (
    barcode_ text,
    user_data_ refcursor
)
 RETURNS refcursor AS $body$
BEGIN

open user_data_ for
select akb.barcode as sample_name,
        akb.barcode as ANONYMIZED_NAME, 
        akb.sample_date as collection_date, 
        'y' as "public",
        0 as depth,
        'American Gut Project ' || akb.site_sampled || ' sample' as DESCRIPTION,
        akb.sample_time, 
        0 as altitude, 
        'y' as assigned_from_geo,
        'American Gut Project' as TITLE,
        case akb.site_sampled
            when 'Please select...' then 'unknown'
            else akb.site_sampled
        end as site_sampled,
        
        md5(md5(cast(ahs.ag_login_id as varchar(100)) || ahs.participant_name)) as host_subject_id,         
        
        case akb.site_sampled
            when 'Stool' then '408170'
            when 'Mouth' then '447426'
            when 'Right hand' then '539655'
            when 'Left hand' then '539655'
            when 'Forehead' then '539655'
            when 'Nares' then '1115523'
            when 'Hair' then '646099'
            when 'Tears' then '646099'
            when 'Ear wax' then '646099'
            when 'Nasal mucus' then '1115523'
            when 'Vaginal mucus' then '646099'
            when 'Please select...' then 'unknown'
            else akb.site_sampled
        end as TAXON_ID,
        '9606' host_taxid,
        case akb.site_sampled
            when 'Stool' then 'human gut metagenome'
            when 'Mouth' then 'human oral metagenome'
            when 'Right hand' then 'human skin metagenome'
            when 'Left hand' then 'human skin metagenome'
            when 'Forehead' then 'human skin metagenome'
            when 'Nares' then 'upper respiratory tract metagenome'
            when 'Hair' then 'human metagenome'
            when 'Tears' then 'human metagenome'
            when 'Ear wax' then 'human metagenome'
            when 'Vaginal mucus' then 'human metagenome'
            when 'Please select...' then 'unknown'
            else akb.site_sampled
        end as common_name,        
        'human' as host_common_name,
        case akb.site_sampled
            when 'Stool' then 'UBERON:feces'
            when 'Mouth' then 'UBERON:oral cavity'
            when 'Right hand' then 'UBERON:skin'
            when 'Left hand' then 'UBERON:skin'
            when 'Forehead' then 'UBERON:skin'
            when 'Nares' then 'UBERON:nose'
            when 'Hair' then 'UBERON:hair'
            when 'Tears' then 'UBERON:eye'
            when 'Ear wax' then 'UBERON:ear'
            when 'Nasal mucus' then 'UBERON:nose'
            when 'Vaginal mucus' then 'UBERON:vagina'
            when 'Please select...' then 'unknown'
            else akb.site_sampled
        end as body_habitat, 
        case akb.site_sampled
            when 'Stool' then 'UBERON:feces'
            when 'Mouth' then 'UBERON:tongue'
            when 'Right hand' then 'UBERON:hand'
            when 'Left hand' then 'UBERON:hand'
            when 'Forehead' then 'UBERON:skin'
            when 'Nares' then 'UBERON:nostril'
            when 'Hair' then 'UBERON:hair follicle'
            when 'Tears' then 'UBERON:secretion'
            when 'Ear wax' then 'UBERON:ear canal'
            when 'Nasal mucus' then 'UBERON:nostril'
            when 'Vaginal mucus' then 'UBERON:mucosa of vagina'
            when 'Please select...' then 'unknown'
            else akb.site_sampled
        end as body_site, 
        case akb.site_sampled
            when 'Stool' then 'UBERON:feces'
            when 'Mouth' then 'UBERON:saliva'
            when 'Right hand' then 'UBERON:sebum'
            when 'Left hand' then 'UBERON:sebum'
            when 'Forehead' then 'UBERON:sebum'
            when 'Nares' then 'UBERON:mucus'
            when 'Hair' then 'UBERON:sebum'
            when 'Tears' then 'UBERON:tear'
            when 'Ear wax' then 'UBERON:cerumen'
            when 'Nasal mucus' then 'UBERON:mucus'
            when 'Vaginal mucus' then 'UBERON:mucus'
            when 'Please select...' then 'unknown'
            else akb.site_sampled
        end as body_product, 
        case akb.site_sampled
            when 'Stool' then 'ENVO:urban biome'
            when 'Mouth' then 'ENVO:urban biome'
            when 'Right hand' then 'ENVO:urban biome'
            when 'Left hand' then 'ENVO:urban biome'
            when 'Forehead' then 'ENVO:urban biome'
            when 'Nares' then 'ENVO:urban biome'
            when 'Hair' then 'ENVO:urban biome'
            when 'Tears' then 'ENVO:urban biome'
            when 'Ear wax' then 'ENVO:urban biome'
            when 'Nasal mucus' then 'ENVO:urban biome'
            when 'Vaginal mucus' then 'ENVO:urban biome'
            when 'Please select...' then 'unknown'
            else akb.site_sampled
        end as env_biome, 
        case akb.site_sampled
            when 'Stool' then 'ENVO:human-associated habitat'
            when 'Mouth' then 'ENVO:human-associated habitat'
            when 'Right hand' then 'ENVO:human-associated habitat'
            when 'Left hand' then 'ENVO:human-associated habitat'
            when 'Forehead' then 'ENVO:human-associated habitat'
            when 'Nares' then 'ENVO:human-associated habitat'
            when 'Hair' then 'ENVO:human-associated habitat'
            when 'Tears' then 'ENVO:human-associated habitat'
            when 'Ear wax' then 'ENVO:human-associated habitat'
            when 'Nasal mucus' then 'ENVO:human-associated habitat'
            when 'Vaginal mucus' then 'ENVO:human-associated habitat'
            when 'Please select...' then 'unknown'
            else akb.site_sampled
        end as env_feature, 
        case akb.site_sampled
            when 'Stool' then 'ENVO:feces'
            when 'Mouth' then 'ENVO:saliva'
            when 'Right hand' then 'ENVO:sebum'
            when 'Left hand' then 'ENVO:sebum'
            when 'Forehead' then 'ENVO:sebum'
            when 'Nares' then 'ENVO:mucus'
            when 'Hair' then 'ENVO:sebum'
            when 'Tears' then 'ENVO:tears'
            when 'Ear wax' then 'ENVO:cerumen'
            when 'Nasal mucus' then 'ENVO:mucus'
            when 'Vaginal mucus' then 'ENVO:mucus'
            when 'Please select...' then 'unknown'
            else akb.site_sampled
        end as env_matter,
        case
            when coalesce(city::text, '') = '' then 'unknown'
            else lower(city)
        end as city, 
        case
            when coalesce(state::text, '') = '' then 'unknown'
            else upper(state)
        end as state,
        case 
            when coalesce(zip::text, '') = '' then 'unknown'
            when zip ~ '^\d*$' and length(zip) < 5 then lpad(zip, 5, '0')
            else zip
        end as zip,
        case 
            when lower(country) is null then 'unknown'
            when lower(country) = 'united states' then 'GAZ:United States of America'
            when lower(country) = 'united states of america' then 'GAZ:United States of America'
            when lower(country) = 'us' then 'GAZ:United States of America'
            when lower(country) = 'usa' then 'GAZ:United States of America'
            when lower(country) = 'u.s.a' then 'GAZ:United States of America'
            when lower(country) = 'u.s.' then 'GAZ:United States of America'
            when lower(country) = 'canada' then 'GAZ:Canada'
            when lower(country) = 'canadian' then 'GAZ:Canada'
            when lower(country) = 'ca' then 'GAZ:Canada'
            when lower(country) = 'australia' then 'GAZ:Australia'
            when lower(country) = 'au' then 'GAZ:Australia'
            when lower(country) = 'united kingdom' then 'GAZ:United Kingdom'
            when lower(country) = 'belgium' then 'GAZ:Belgium'
            when lower(country) = 'gb' then 'GAZ:Great Britain'
            when lower(country) = 'korea, republic of' then 'GAZ:South Korea'
            when lower(country) = 'nl' then 'GAZ:Netherlands'
            when lower(country) = 'netherlands' then 'GAZ:Netherlands'
            when lower(country) = 'spain' then 'GAZ:Spain'
            when lower(country) = 'es' then 'GAZ:Spain'
            when lower(country) = 'norway' then 'GAZ:Norway'
            when lower(country) = 'germany' then 'GAZ:Germany'
            when lower(country) = 'de' then 'GAZ:Germany'
            when lower(country) = 'china' then 'GAZ:China'
            when lower(country) = 'singapore' then 'GAZ:Singapore'
            when lower(country) = 'new zealand' then 'GAZ:New Zealand'
            when lower(country) = 'france' then 'GAZ:France'
            when lower(country) = 'fr' then 'GAZ:France'
            when lower(country) = 'ch' then 'GAZ:Switzerland'
            when lower(country) = 'switzerland' then 'GAZ:Switzerland'
            when lower(country) = 'denmark' then 'GAZ:Denmark'
            when lower(country) = 'scotland' then 'GAZ:Scotland'
            when lower(country) = 'united arab emirates' then 'GAZ:United Arab Emirates'
            when lower(country) = 'ireland' then 'GAZ:Ireland'
            when lower(country) = 'thailand' then 'GAZ:Thailand'
            else 'unknown'
        end as country,
        case
            when coalesce(al.latitude::text, '') = '' then 'unknown'
            else cast(al.latitude as varchar(100))
        end as latitude, 
        case
            when coalesce(al.longitude::text, '') = '' then 'unknown'
            else cast(al.longitude as varchar(100))
        end as longitude, 
        case
            when coalesce(al.elevation::text, '') = '' then 'unknown'
            else cast(al.elevation as varchar(100))
        end as elevation, 
        'years' as age_unit,
        case
            when (ahs.birth_date IS NOT NULL AND ahs.birth_date::text <> '') then
                case
                    when cast((current_date - to_date(ahs.birth_date, 'MM/DD/YYYY')) / 365.0 as integer) between 1 and 120 then
                        cast(cast((current_date - to_date(ahs.birth_date, 'MM/DD/YYYY')) / 365.0 as integer) as varchar(100))
                    else
                        'unknown'
                end
            else 'unknown'
        end as age,
        case
            when coalesce(ACNE_MEDICATION::text, '') = '' then 'unknown'
            else lower(REPLACE(REPLACE(REPLACE(cast(ACNE_MEDICATION as text), CHR(10), ''), CHR(13), ''), CHR(9), ''))
        end as ACNE_MEDICATION,
        case
            when coalesce(ACNE_MEDICATION_OTC::text, '') = '' then 'unknown'
            else lower(REPLACE(REPLACE(REPLACE(cast(ACNE_MEDICATION_OTC as text), CHR(10), ''), CHR(13), ''), CHR(9), ''))
        end as ACNE_MEDICATION_OTC, 
        case
            when coalesce(ALCOHOL_FREQUENCY::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(cast(ALCOHOL_FREQUENCY as text), CHR(10), ''), CHR(13),''), CHR(9),'')
        end as ALCOHOL_FREQUENCY, 


        case
            when coalesce(FAT_PER::text, '') = '' or coalesce(CARBOHYDRATE_PER::text, '') = '' or coalesce(PROTEIN_PER::text, '') = '' then 'unknown'
            when cast(REPLACE(REPLACE(REPLACE(cast(FAT_PER as text), CHR(10), ''), CHR(13),''), CHR(9),'') as integer) +
                 cast(REPLACE(REPLACE(REPLACE(cast(CARBOHYDRATE_PER as text), CHR(10),''), CHR(13),''), CHR(9),'') as integer) +
                 cast(REPLACE(REPLACE(REPLACE(cast(PROTEIN_PER as text), CHR(10), ''), CHR(13), ''), CHR(9), '') as integer) between 90 and 110 then
                case
                    when cast(REPLACE(REPLACE(REPLACE(cast(FAT_PER as text), CHR(10), ''), CHR(13), ''), CHR(9), '') as integer) >= 0 then
                        cast(REPLACE(REPLACE(REPLACE(cast(FAT_PER as text), CHR(10), ''), CHR(13), ''), CHR(9), '') as varchar(100))
                    else 'unknown'
                end
            else 'unknown'
        end as FAT_PER, 
        case
            when coalesce(FAT_PER::text, '') = '' or coalesce(CARBOHYDRATE_PER::text, '') = '' or coalesce(PROTEIN_PER::text, '') = '' then 'unknown'
            when cast(REPLACE(REPLACE(REPLACE(cast(FAT_PER as text), CHR(10), ''), CHR(13), ''), CHR(9), '') as integer) +
                 cast(REPLACE(REPLACE(REPLACE(cast(CARBOHYDRATE_PER as text), CHR(10), ''), CHR(13), ''), CHR(9), '') as integer) +
                 cast(REPLACE(REPLACE(REPLACE(cast(PROTEIN_PER as text), CHR(10), ''), CHR(13), ''), CHR(9), '') as integer) between 90 and 110 then
                case
                    when cast(REPLACE(REPLACE(REPLACE(cast(CARBOHYDRATE_PER as text), CHR(10), ''), CHR(13), ''), CHR(9), '') as integer) >= 0 then
                        cast(REPLACE(REPLACE(REPLACE(cast(CARBOHYDRATE_PER as text), CHR(10), ''), CHR(13), ''), CHR(9), '') as varchar(100))
                    else 'unknown'
                end
            else 'unknown'
        end as CARBOHYDRATE_PER, 
        case
            when coalesce(FAT_PER::text, '') = '' or coalesce(CARBOHYDRATE_PER::text, '') = '' or coalesce(PROTEIN_PER::text, '') = '' then 'unknown'
            when cast(REPLACE(REPLACE(REPLACE(FAT_PER, CHR(10), ''), CHR(13), ''), CHR(9), '') as integer) +
                 cast(REPLACE(REPLACE(REPLACE(CARBOHYDRATE_PER, CHR(10), ''), CHR(13), ''), CHR(9), '') as integer) +
                 cast(REPLACE(REPLACE(REPLACE(PROTEIN_PER, CHR(10), ''), CHR(13), ''), CHR(9), '') as integer) between 90 and 110 then
                case
                    when cast(REPLACE(REPLACE(REPLACE(PROTEIN_PER, CHR(10), ''), CHR(13), ''), CHR(9), '') as integer) >= 0 then
                        cast(REPLACE(REPLACE(REPLACE(PROTEIN_PER, CHR(10), ''), CHR(13), ''), CHR(9), '') as varchar(100))
                    else 'unknown'
                end
            else 'unknown'
        end as PROTEIN_PER, 



        case
            when coalesce(ANIMAL_PER::text, '') = '' or coalesce(PLANT_PER::text, '') = '' then 'unknown'
            when cast(REPLACE(REPLACE(REPLACE(ANIMAL_PER, CHR(10), ''), CHR(13), ''), CHR(9), '') as integer) + cast(REPLACE(REPLACE(REPLACE(PLANT_PER, CHR(10), ''), CHR(13), ''), CHR(9), '') as integer) between 90 and 110 then
                case
                    when cast(REPLACE(REPLACE(REPLACE(ANIMAL_PER, CHR(10), ''), CHR(13), ''), CHR(9), '') as integer) >= 0
                        then cast(REPLACE(REPLACE(REPLACE(ANIMAL_PER, CHR(10), ''), CHR(13), ''), CHR(9), '') as varchar(100))
                    else 'unknown'
                end
            else 'unknown'
        end as ANIMAL_PER, 
        case
            when coalesce(ANIMAL_PER::text, '') = '' or coalesce(PLANT_PER::text, '') = '' then 'unknown'
            when cast(REPLACE(REPLACE(REPLACE(ANIMAL_PER, CHR(10), ''), CHR(13), ''), CHR(9), '') as integer) + cast(REPLACE(REPLACE(REPLACE(PLANT_PER, CHR(10), ''), CHR(13), ''), CHR(9), '') as integer) between 90 and 110 then
                case
                    when cast(REPLACE(REPLACE(REPLACE(PLANT_PER, CHR(10), ''), CHR(13), ''), CHR(9), '') as integer) >= 0
                        then cast(REPLACE(REPLACE(REPLACE(PLANT_PER, CHR(10), ''), CHR(13), ''), CHR(9), '') as varchar(100))
                    else 'unknown'
                end
            else 'unknown'
        end as PLANT_PER, 





        case 
            when coalesce(ANTIBIOTIC_CONDITION::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(ANTIBIOTIC_CONDITION, CHR(10), ''), CHR(13), ''), CHR(9), '')
        end as ANTIBIOTIC_CONDITION, 
        case 
            when coalesce(ANTIBIOTIC_SELECT::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(ANTIBIOTIC_SELECT, CHR(10), ''), CHR(13), ''), CHR(9), '')
        end as ANTIBIOTIC_SELECT, 
        case 
            when coalesce(APPENDIX_REMOVED::text, '') = '' then 'unknown'
            else lower(REPLACE(REPLACE(REPLACE(APPENDIX_REMOVED, CHR(10), ''), CHR(13), ''), CHR(9), ''))
        end as APPENDIX_REMOVED, 
        case
            when coalesce(ASTHMA::text, '') = '' then 'unknown'
            else lower(REPLACE(REPLACE(REPLACE(ASTHMA, CHR(10), ''), CHR(13), ''), CHR(9), ''))
        end as ASTHMA, 
        case 
            when coalesce(BIRTH_DATE::text, '') = '' then 'unknown'
            else regexp_replace(replace(replace(replace(birth_date, CHR(10), ''), CHR(13), ''), CHR(9), ''), '([[:digit:]]{2})/([[:digit:]]{2})/([[:digit:]]{4})', E'\\1/\\3')
        end as BIRTH_DATE, 
        case 
            when coalesce(CAT::text, '') = '' then 'unknown'
            else lower(REPLACE(REPLACE(REPLACE(CAT, CHR(10), ''), CHR(13), ''), CHR(9), ''))
        end as CAT, 
        case
            when coalesce(CHICKENPOX::text, '') = '' then 'unknown'
            else lower(REPLACE(REPLACE(REPLACE(CHICKENPOX, CHR(10), ''), CHR(13), ''), CHR(9), ''))
        end as CHICKENPOX, 
        
        case 
            when coalesce(COMMUNAL_DINING::text, '') = '' then 'unknown'
            when REPLACE(REPLACE(REPLACE(COMMUNAL_DINING, CHR(10), ''), CHR(13), ''), CHR(9), '') = 'on' then 'yes'
            else REPLACE(REPLACE(REPLACE(COMMUNAL_DINING, CHR(10), ''), CHR(13), ''), CHR(9), '')
        end as COMMUNAL_DINING, 
        case 
            when coalesce(CONDITIONS_MEDICATION::text, '') = '' then 'unknown'
            else lower(REPLACE(REPLACE(REPLACE(CONDITIONS_MEDICATION, CHR(10), ''), CHR(13), ''), CHR(9), ''))
        end as CONDITIONS_MEDICATION, 
        
        case 
            when coalesce(CONTRACEPTIVE::text, '') = '' then 'unknown'
            when REPLACE(REPLACE(REPLACE(CONTRACEPTIVE, CHR(10), ''), CHR(13), ''), CHR(9), '') = 'I take the ' then 'I take the pill'
            else REPLACE(REPLACE(REPLACE(CONTRACEPTIVE, CHR(10), ''), CHR(13), ''), CHR(9), '')
        end as contraceptive, 
        case
            when coalesce(COSMETICS_FREQUENCY::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(COSMETICS_FREQUENCY, CHR(10), ''), CHR(13), ''), CHR(9), '')
        end as COSMETICS_FREQUENCY, 
        case
            when 
            (
                SELECT  term
                from    controlled_vocab_values
                where   vocab_value_id = cast(ahs.COUNTRY_OF_BIRTH as bigint)
            ) is null then 'unknown'
            else
            (
                SELECT  term
                from    controlled_vocab_values
                where   vocab_value_id = cast(ahs.COUNTRY_OF_BIRTH as bigint)
            )
        end as COUNTRY_OF_BIRTH,
        case
            when coalesce(CSECTION::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(CSECTION, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as CSECTION, 
        case
            when coalesce(CURRENT_RESIDENCE_DURATION::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(CURRENT_RESIDENCE_DURATION, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as CURRENT_RESIDENCE_DURATION, 
        case
            when coalesce(DECEASED_PARENT::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(DECEASED_PARENT, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as DECEASED_PARENT, 
        case
            when coalesce(DEODERANT_USE::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(DEODERANT_USE, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as DEODORANT_USE, 
        case
            when coalesce(DIABETES::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(DIABETES, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as DIABETES, 
        case
            when coalesce(DIABETES_DIAGNOSE_DATE::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(DIABETES_DIAGNOSE_DATE, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as DIABETES_DIAGNOSE_DATE, 
        case
            when coalesce(DIABETES_MEDICATION::text, '') = '' then 'unknown'
            when REPLACE(REPLACE(REPLACE(DIABETES_MEDICATION, CHR(10), ''), CHR(13), ''), CHR(9), '') = 'on' then 'yes'
            else REPLACE(REPLACE(REPLACE(DIABETES_MEDICATION, CHR(10), ''), CHR(13), ''), CHR(9), '')
        end as DIABETES_MEDICATION, 
        case
            when coalesce(DIET_TYPE::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(DIET_TYPE, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as DIET_TYPE, 
        case 
            when coalesce(DOG::text, '') = '' then 'unknown'
            else lower(REPLACE(REPLACE(REPLACE(DOG, CHR(10), ''), CHR(13), ''), CHR(9), '')) 
        end as DOG, 
        case
            when coalesce(DRINKING_WATER_SOURCE::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(DRINKING_WATER_SOURCE, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as DRINKING_WATER_SOURCE, 
        case
            when coalesce(EXERCISE_FREQUENCY::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(EXERCISE_FREQUENCY, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as EXERCISE_FREQUENCY, 
        case
            when coalesce(EXERCISE_LOCATION::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(EXERCISE_LOCATION, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as EXERCISE_LOCATION,         
        case 
            when coalesce(FIBER_GRAMS::text, '') = '' then 'unknown'
            when cast(REPLACE(REPLACE(REPLACE(FIBER_GRAMS, CHR(10), ''), CHR(13), ''), CHR(9), '') as double precision) between 1 and 1000 then
                cast(REPLACE(REPLACE(REPLACE(FIBER_GRAMS, CHR(10), ''), CHR(13), ''), CHR(9), '') as varchar(100))
            else 'unknown'
        end as FIBER_GRAMS, 
        case
            when coalesce(FLOSSING_FREQUENCY::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(FLOSSING_FREQUENCY, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as FLOSSING_FREQUENCY, 
        case
            when coalesce(FLU_VACCINE_DATE::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(FLU_VACCINE_DATE, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as FLU_VACCINE_DATE, 
        case 
            when coalesce(FOODALLERGIES_OTHER::text, '') = '' then 'unknown'
            when FOODALLERGIES_OTHER = 'on' then 'yes'
            else FOODALLERGIES_OTHER
        end as FOODALLERGIES_OTHER, 
        case
            when coalesce(FOODALLERGIES_OTHER_TEXT::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(FOODALLERGIES_OTHER_TEXT, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as FOODALLERGIES_OTHER_TEXT, 
        case
            when coalesce(FOODALLERGIES_PEANUTS::text, '') = '' then 'unknown'
            when FOODALLERGIES_PEANUTS = 'on' then 'yes'
            else FOODALLERGIES_PEANUTS
        end as FOODALLERGIES_PEANUTS,
        case
            when coalesce(FOODALLERGIES_SHELLFISH::text, '') = '' then 'unknown'
            when FOODALLERGIES_SHELLFISH = 'on' then 'yes'
            else FOODALLERGIES_SHELLFISH
        end as FOODALLERGIES_SHELLFISH, 
        case
            when coalesce(FOODALLERGIES_TREENUTS::text, '') = '' then 'unknown'
            when FOODALLERGIES_TREENUTS = 'on' then 'yes'
            else FOODALLERGIES_TREENUTS
        end as FOODALLERGIES_TREENUTS, 
        case
            when coalesce(FRAT::text, '') = '' then 'unknown'
            when FRAT = 'on' then 'yes'
            else FRAT
        end as FRAT, 
        case
            when coalesce(GENDER::text, '') = '' then 'unknown'
            else lower(REPLACE(REPLACE(REPLACE(GENDER, CHR(10), ''), CHR(13), ''), CHR(9), ''))
        end as sex,
        case
            when coalesce(GLUTEN::text, '') = '' then 'unknown'
            else lower(REPLACE(REPLACE(REPLACE(GLUTEN, CHR(10), ''), CHR(13), ''), CHR(9), ''))
        end as GLUTEN, 
        case
            when coalesce(HAND::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(HAND, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as dominant_hand,
        case
            when coalesce(HEIGHT_IN::text, '') = '' then 'unknown'
            when cast(REPLACE(REPLACE(REPLACE(HEIGHT_IN, CHR(10), ''), CHR(13), ''), CHR(9), '') as double precision) between 10 and 106 then
                cast(cast(REPLACE(REPLACE(REPLACE(HEIGHT_IN, CHR(10), ''), CHR(13), ''), CHR(9), '') as double precision) as varchar(100))
            else 'unknown'
        end as HEIGHT_IN,
        case
            when coalesce(HEIGHT_CM::text, '') = '' then 'unknown'
            when cast(REPLACE(REPLACE(REPLACE(HEIGHT_CM, CHR(10), ''), CHR(13), ''), CHR(9), '') as double precision) between 25 and 270 then
                cast(cast(REPLACE(REPLACE(REPLACE(HEIGHT_CM, CHR(10), ''), CHR(13), ''), CHR(9), '') as double precision) as varchar(100))
            else 'unknown'
        end as height_or_length,
        case
            when coalesce(IBD::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(IBD, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as IBD, 
        case
            when coalesce(LACTOSE::text, '') = '' then 'unknown'
            else lower(REPLACE(REPLACE(REPLACE(LACTOSE, CHR(10), ''), CHR(13), ''), CHR(9), ''))
        end as LACTOSE, 
        case
            when coalesce(LAST_TRAVEL::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(LAST_TRAVEL, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as LAST_TRAVEL, 
        case
            when coalesce(LIVINGWITH::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(LIVINGWITH, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as LIVINGWITH, 
        case
            when coalesce(MAINFACTOR_OTHER_1::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(MAINFACTOR_OTHER_1, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as MAINFACTOR_OTHER_1, 
        case
            when coalesce(MAINFACTOR_OTHER_2::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(MAINFACTOR_OTHER_2, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as MAINFACTOR_OTHER_2, 
        case
            when coalesce(MAINFACTOR_OTHER_3::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(MAINFACTOR_OTHER_3, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as MAINFACTOR_OTHER_3, 
        case
            when coalesce(MIGRAINE::text, '') = '' then 'unknown'
            else lower(REPLACE(REPLACE(REPLACE(MIGRAINE, CHR(10), ''), CHR(13), ''), CHR(9), '')) 
        end as MIGRAINE, 
        case
            when coalesce(MIGRAINEMEDS::text, '') = '' then 'unknown'
            when MIGRAINEMEDS = 'on' then 'yes'
            else MIGRAINEMEDS
        end as MIGRAINEMEDS, 
        case
            when coalesce(MIGRAINE_AGGRAVATION::text, '') = '' then 'unknown'
            when MIGRAINE_AGGRAVATION = 'on' then 'yes'
            else MIGRAINE_AGGRAVATION
        end as MIGRAINE_AGGRAVATION, 
        case 
            when coalesce(MIGRAINE_AURA::text, '') = '' then 'unknown'
            when MIGRAINE_AURA = 'on' then 'yes'
            else MIGRAINE_AURA
        end as MIGRAINE_AURA, 
        case
            when coalesce(MIGRAINE_FACTOR_1::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(MIGRAINE_FACTOR_1, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as MIGRAINE_FACTOR_1, 
        case
            when coalesce(MIGRAINE_FACTOR_2::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(MIGRAINE_FACTOR_2, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as MIGRAINE_FACTOR_2, 
        case
            when coalesce(MIGRAINE_FACTOR_3::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(MIGRAINE_FACTOR_3, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as MIGRAINE_FACTOR_3, 
        case
            when coalesce(MIGRAINE_FREQUENCY::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(MIGRAINE_FREQUENCY, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as MIGRAINE_FREQUENCY, 
        case
            when coalesce(MIGRAINE_NAUSEA::text, '') = '' then 'unknown'
            when MIGRAINE_NAUSEA = 'on' then 'yes'
            else MIGRAINE_NAUSEA
        end as MIGRAINE_NAUSEA, 
        case 
            when coalesce(MIGRAINE_PAIN::text, '') = '' then 'unknown'
            when MIGRAINE_PAIN = 'on' then 'yes'
            else MIGRAINE_PAIN
        end as MIGRAINE_PAIN, 
        case
            when coalesce(MIGRAINE_PHONOPHOBIA::text, '') = '' then 'unknown'
            when MIGRAINE_PHONOPHOBIA = 'on' then 'yes'
            else MIGRAINE_PHONOPHOBIA
        end as MIGRAINE_PHONOPHOBIA, 
        case
            when coalesce(MIGRAINE_PHOTOPHOBIA::text, '') = '' then 'unknown'
            when MIGRAINE_PHOTOPHOBIA = 'on' then 'yes'
            else MIGRAINE_PHOTOPHOBIA
        end as MIGRAINE_PHOTOPHOBIA, 
        case
            when coalesce(MIGRAINE_RELATIVES::text, '') = '' then 'unknown'
            when MIGRAINE_RELATIVES = 'on' then 'yes'
            else MIGRAINE_RELATIVES
        end as MIGRAINE_RELATIVES, 
        case
            when coalesce(MULTIVITAMIN::text, '') = '' then 'unknown'
            else lower(MULTIVITAMIN)
        end as MULTIVITAMIN, 
        case
            when coalesce(NAILS::text, '') = '' then 'unknown'
            else lower(NAILS)
        end as NAILS, 
        case
            when coalesce(NONFOODALLERGIES_BEESTINGS::text, '') = '' then 'unknown'
            when NONFOODALLERGIES_BEESTINGS = 'on' then 'yes'
            else NONFOODALLERGIES_BEESTINGS
        end as NONFOODALLERGIES_BEESTINGS, 
        case
            when coalesce(NONFOODALLERGIES_DANDER::text, '') = '' then 'unknown'
            when NONFOODALLERGIES_DANDER = 'on' then 'yes'
            else NONFOODALLERGIES_DANDER
        end as NONFOODALLERGIES_DANDER, 
        case
            when coalesce(NONFOODALLERGIES_DRUG::text, '') = '' then 'unknown'
            when NONFOODALLERGIES_DRUG = 'on' then 'yes'
            else NONFOODALLERGIES_DRUG
        end as NONFOODALLERGIES_DRUG, 
        case
            when coalesce(NONFOODALLERGIES_NO::text, '') = '' then 'unknown'
            when NONFOODALLERGIES_NO = 'on' then 'yes'
            else NONFOODALLERGIES_NO
        end as NONFOODALLERGIES_NO, 
        case
            when coalesce(NONFOODALLERGIES_POISONIVY::text, '') = '' then 'unknown'
            when NONFOODALLERGIES_POISONIVY = 'on' then 'yes'
            else NONFOODALLERGIES_POISONIVY
        end as NONFOODALLERGIES_POISONIVY, 
        case
            when coalesce(NONFOODALLERGIES_SUN::text, '') = '' then 'unknown'
            when NONFOODALLERGIES_SUN = 'on' then 'yes'
            else NONFOODALLERGIES_SUN
        end as NONFOODALLERGIES_SUN, 
        case
            when coalesce(PERCENTAGE_FROM_CARBS::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(PERCENTAGE_FROM_CARBS, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as PERCENTAGE_FROM_CARBS, 
        case
            when coalesce(PKU::text, '') = '' then 'unknown'
            else lower(REPLACE(REPLACE(REPLACE(PKU, CHR(10), ''), CHR(13), ''), CHR(9), '')) 
        end as PKU, 
        case
            when coalesce(POOL_FREQUENCY::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(POOL_FREQUENCY, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end POOL_FREQUENCY, 
        case
            when coalesce(PREGNANT::text, '') = '' and coalesce(PREGNANT_DUE_DATE::text, '') = '' then 'no'
            when PREGNANT = 'on' and coalesce(PREGNANT_DUE_DATE::text, '') = '' then 'unknown'
            when PREGNANT = 'on' and (PREGNANT_DUE_DATE IS NOT NULL AND PREGNANT_DUE_DATE::text <> '') then 'yes'
            else lower(PREGNANT)
        end as PREGNANT, 
        case
            when coalesce(PREGNANT_DUE_DATE::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(PREGNANT_DUE_DATE, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as PREGNANT_DUE_DATE, 
        case
            when coalesce(PRIMARY_CARB::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(PRIMARY_CARB, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as PRIMARY_CARB, 
        case
            when coalesce(PRIMARY_VEGETABLE::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(PRIMARY_VEGETABLE, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as PRIMARY_VEGETABLE, 
        case
            when coalesce(RACE::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(RACE, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as RACE, 
        case
            when coalesce(RACE_OTHER::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(RACE_OTHER, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as RACE_OTHER, 
        case
            when coalesce(ROOMMATES::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(ROOMMATES, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as ROOMMATES, 
        case
            when coalesce(SEASONAL_ALLERGIES::text, '') = '' then 'unknown'
            else lower(REPLACE(REPLACE(REPLACE(SEASONAL_ALLERGIES, CHR(10), ''), CHR(13), ''), CHR(9), '')) 
        end as SEASONAL_ALLERGIES, 
        case
            when coalesce(SHARED_HOUSING::text, '') = '' then 'unknown'
            else lower(REPLACE(REPLACE(REPLACE(SHARED_HOUSING, CHR(10), ''), CHR(13), ''), CHR(9), '')) 
        end as SHARED_HOUSING, 
        case
            when coalesce(SKIN_CONDITION::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(SKIN_CONDITION, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as SKIN_CONDITION, 
        case 
            when coalesce(SLEEP_DURATION::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(SLEEP_DURATION, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as SLEEP_DURATION, 
        case
            when coalesce(SMOKING_FREQUENCY::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(SMOKING_FREQUENCY, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as SMOKING_FREQUENCY, 
        case
            when coalesce(SOFTENER::text, '') = '' then 'unknown'
            else lower(REPLACE(REPLACE(REPLACE(SOFTENER, CHR(10), ''), CHR(13), ''), CHR(9), '')) 
        end as SOFTENER, 
        case
            when coalesce(SPECIAL_RESTRICTIONS::text, '') = '' then 'unknown'
            else lower(REPLACE(REPLACE(REPLACE(SPECIAL_RESTRICTIONS, CHR(10), ''), CHR(13), ''), CHR(9), '')) 
        end as SPECIAL_RESTRICTIONS, 
        case
            when coalesce(SUPPLEMENTS::text, '') = '' then 'unknown'
            else lower(REPLACE(REPLACE(REPLACE(SUPPLEMENTS, CHR(10), ''), CHR(13), ''), CHR(9), '')) 
        end as SUPPLEMENTS, 
        case
            when coalesce(TANNING_BEDS::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(TANNING_BEDS, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as TANNING_BEDS, 
        case
            when coalesce(TANNING_SPRAYS::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(TANNING_SPRAYS, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as TANNING_SPRAYS, 
        case
            when coalesce(TEETHBRUSHING_FREQUENCY::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(TEETHBRUSHING_FREQUENCY, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as TEETHBRUSHING_FREQUENCY, 
        case
            when coalesce(TONSILS_REMOVED::text, '') = '' then 'unknown'
            else lower(REPLACE(REPLACE(REPLACE(TONSILS_REMOVED, CHR(10), ''), CHR(13), ''), CHR(9), '')) 
        end as TONSILS_REMOVED, 
        case
            when coalesce(TYPES_OF_PLANTS::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(TYPES_OF_PLANTS, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as TYPES_OF_PLANTS, 
        case
            when coalesce(WEIGHT_CHANGE::text, '') = '' then 'unknown'
            else REPLACE(REPLACE(REPLACE(WEIGHT_CHANGE, CHR(10), ''), CHR(13), ''), CHR(9), '') 
        end as WEIGHT_CHANGE, 
        case
            when coalesce(WEIGHT_KG::text, '') = '' then 'unknown'
            when cast(REPLACE(REPLACE(REPLACE(WEIGHT_KG, CHR(10), ''), CHR(13), ''), CHR(9), '') as double precision) between 1 and 227 then
                cast(REPLACE(REPLACE(REPLACE(WEIGHT_KG, CHR(10), ''), CHR(13), ''), CHR(9), '') as varchar(100))
            else 'unknown'
        end as tot_mass,
        case
            when coalesce(WEIGHT_LBS::text, '') = '' then 'unknown'
            when cast(REPLACE(REPLACE(REPLACE(WEIGHT_LBS, CHR(10), ''), CHR(13), ''), CHR(9), '') as double precision) between 1 and 500 then
                cast(REPLACE(REPLACE(REPLACE(WEIGHT_LBS, CHR(10), ''), CHR(13), ''), CHR(9), '') as varchar(100))
            else 'unknown'
        end as WEIGHT_LBS,
        case
            when cast(weight_lbs as numeric) > 0 and cast(height_in as numeric) > 0 then
            case 
                when (cast(weight_lbs as numeric) / ((cast(height_in as numeric) * cast(height_in as numeric)))) * 703 between 5 and 100 
                    then cast((cast(weight_lbs as numeric) / ((cast(height_in as numeric) * cast(height_in as numeric)))) * 703 as varchar(100))
                else 'unknown'
            end
            else 'unknown'
        end as BMI,
        case
            when 
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'antibiotic_med_%'
            ) is null then 'unknown'
            else 
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'antibiotic_med_%'
            )
        end as antibiotic_meds,
        case
            when 
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'diabetes_medications_%'
            ) is null then 'unknown'
            else
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'diabetes_medications_%'
            )
        end as diabetes_medications,
        case
            when 
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'dietrestrictions_%'
            ) is null then 'unknown'
            else
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'dietrestrictions_%'
            )
        end as diet_restrictions,
        case
            when 
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'general_meds_%'
            ) is null then 'unknown'
            else
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'general_meds_%'
            )
        end as general_meds,
        case
            when 
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'migraine_medication_%'
            ) is null then 'unknown'
            else
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'migraine_medication_%'
            )
        end as migraine_medications,
        case
            when 
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'pet_%'
            ) is null then 'unknown'
            else
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'pet_%'
            )
        end as pets,
        case
            when
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'pet_contact_%'
            ) is null then 'unknown'
            else
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'pet_contact_%'
            )
        end as pet_contact,
        case
            when
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'pet_location_%'
            ) is null then 'unknown'
            else
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'pet_location_%'
            )
        end as pet_locations,
        case
            when 
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'relation_%'
            ) is null then 'unknown'
            else
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'relation_%'
            )
        end as relations,
        case
            when
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'supplements_fields_%'
            ) is null then 'unknown'
            else
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and item_name like 'supplements_fields_%'
            )
        end as supplements_fields,
        (
            cast(REPLACE(REPLACE(REPLACE(CARBOHYDRATE_PER, CHR(10), ''), CHR(13), ''), CHR(9), '') as integer) +
            cast(REPLACE(REPLACE(REPLACE(PROTEIN_PER, CHR(10), ''), CHR(13), ''), CHR(9), '') as integer) +
            cast(REPLACE(REPLACE(REPLACE(FAT_PER, CHR(10), ''), CHR(13), ''), CHR(9), '') as integer)
        ) as macronutrient_pct_total,
        
        
        
        case
            when 
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and lower(item_name) like 'antibiotic_med_%'
                        and 
                        (
                            lower(item_value) like '%moxifloxacin%'
                            or lower(item_value) like '%avelox%'
                            or lower(item_value) like '%ciprofloxacin%'
                            or lower(item_value) like '%cipro%'
                        )
            ) is null then 'no'
            else 'yes'
        end as Quinoline,
        case
            when 
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and lower(item_name) like 'antibiotic_med_%'
                        and 
                        (
                            lower(item_value) like '%metronidazole%'
                            or lower(item_value) like '%flagyl%'
                            or lower(item_value) like '%secnidazole%'
                            or lower(item_value) like '%tinidazole%'
                            or lower(item_value) like '%tindamax%'
                        )
            ) is null then 'no'
            else 'yes'
        end as Nitromidazole,
        case
            when 
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and lower(item_name) like 'antibiotic_med_%'
                        and 
                        (
                            lower(item_value) like '%amoxicillin%'
                            or lower(item_value) like '%penicillin%'
                            or lower(item_value) like '%augmentin%'
                            or lower(item_value) like '%methicillin%'
                        )
            ) is null then 'no'
            else 'yes'
        end as Penicillin,
        case
            when 
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and lower(item_name) like 'antibiotic_med_%'
                        and 
                        (
                            lower(item_value) like '%sulfamethoxazole%'
                            or lower(item_value) like '%bactrim%'
                            or lower(item_value) like '%septra%'
                        )
            ) is null then 'no'
            else 'yes'
        end as Sulfa_Drug,
        case
            when 
            (
                SELECT  string_agg(item_value, ',' order by item_name)
                from    ag_survey_multiples
                where   ag_login_id = al.ag_login_id
                        and participant_name = akb.participant_name
                        and lower(item_name) like 'antibiotic_med_%'
                        and 
                        (
                            lower(item_value) like '%cefuroxime axetil%'
                            or lower(item_value) like '%ceftin%'
                            or lower(item_value) like '%cefalexin%'
                            or lower(item_value) like '%keflex%'
                            or lower(item_value) like '%ceftriaxone%'
                            or lower(item_value) like '%recophin%'
                            or lower(item_value) like '%levofloxacin%'
                            or lower(item_value) like '%levaquin%'
                            or lower(item_value) like '%cefdinir%'
                            or lower(item_value) like '%omnicef%'
                            or lower(item_value) like '%cefotaxime%'
                        )
            ) is null then 'no'
            else 'yes'
        end as Cephalosporin
        
        
        
        
        
        
        
        
        
from    ag_login al
        inner join ag_kit ak
        on al.ag_login_id = ak.ag_login_id
        inner join ag_kit_barcodes akb
        on ak.ag_kit_id = akb.ag_kit_id
        inner join ag_human_survey ahs
        on al.ag_login_id = ahs.ag_login_id
where   akb.participant_name = ahs.participant_name
        and (akb.site_sampled IS NOT NULL AND akb.site_sampled::text <> '')
        and akb.site_sampled != 'Please Select...'
        and (akb.sample_date IS NOT NULL AND akb.sample_date::text <> '')
        and akb.barcode = barcode_;
return user_data_;
end;
/*
begin;
select ag_get_barcode_metadata('000001002', 'a');
fetch all in a;
commit;
*/

$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_get_environmental_samples (
    ag_login_id_ uuid,
    results_ in refcursor
)
 RETURNS refcursor AS $body$
BEGIN

    open results_ for
        SELECT  akb.barcode, akb.site_sampled, akb.sample_date, akb.sample_time, 
                akb.notes, b.status
        from    ag_kit_barcodes akb
                inner join barcode b
                on akb.barcode = b.barcode
                inner join ag_kit ak 
                on akb.ag_kit_id = ak.ag_kit_id 
        where   (akb.environment_sampled IS NOT NULL AND akb.environment_sampled::text <> '')
                and ak.ag_login_id = ag_login_id_;
    return results_;     
end;
 /*
 begin;
select ag_get_environmental_samples(cast ('d8592c747da12135e0408a80115d6401' as uuid), 'a'); 
fetch all in a;
 commit;
 */
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_get_human_participants (
    ag_login_id_ uuid,
    results_ in refcursor
)
 RETURNS refcursor AS $body$
BEGIN

    open results_ for
        SELECT  participant_name
        from    ag_human_survey
        where   ag_login_id = ag_login_id_;
    return results_;
end;
 /*
 begin;
select ag_get_human_participants(cast ('d8592c747da12135e0408a80115d6401' as uuid), 'a'); 
fetch all in a;
 commit;
 */
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_get_kits_by_login (
    user_data_ refcursor
)
 RETURNS refcursor AS $body$
BEGIN

    open user_data_ for
        SELECT  lower(al.email) as email, ak.supplied_kit_id, 
                cast(ak.ag_kit_id as varchar(100)) as ag_kit_id
        from    ag_login al
                inner join ag_kit ak
                on al.ag_login_id = ak.ag_login_id
        order by lower(al.email), ak.supplied_kit_id;
    return user_data_;
end;
/*
begin;
select ag_get_kits_by_login ('a');
fetch all in a;
commit;
*/
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_get_kit_details (
    supplied_kit_id_ IN text,
    result_ refcursor
)
 RETURNS refcursor AS $body$
BEGIN

    open result_ for
    SELECT
        cast(ag_kit_id as varchar(100)),
        supplied_kit_id,
        kit_password,
        swabs_per_kit,
        kit_verification_code,
        kit_verified,
        verification_email_sent
    from
        ag_kit
    where
        supplied_kit_id = supplied_kit_id_;
    return result_;
end;
/*
begin;
select ag_get_kit_details('test', 'a');
fetch all in a;
commit;
*/
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_get_kit_id_by_email (
      email_ in text,
      user_data_ refcursor
) RETURNS refcursor AS $body$
BEGIN
     open user_data_ for
         SELECT  k.supplied_kit_id 
         from ag_kit k 
              inner join ag_login l 
              on k.ag_login_id = l.ag_login_id 
         where l.email = email_; 
    return user_data_;
END;
/*
begin;
select ag_get_kit_id_by_email('ejteravest@gmail.com', 'a');
fetch all in a;
commit;
*/
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_get_logins (
    user_data_ refcursor
)
 RETURNS refcursor AS $body$
BEGIN

    open user_data_ for
        SELECT  cast(ag_login_id as varchar(100)) as ag_login_id, 
                lower(email), name
        from    ag_login
        order by lower(email);
    return user_data_;
end;
/*
begin;
select ag_get_logins('a');
fetch all in a;
commit;
*/

$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_get_map_markers (
    results_ in refcursor
)
 RETURNS refcursor AS $body$
BEGIN
    -- PERFORM was replaced with select by Emily this needs tested
    -- Highest priority: completed
    insert  into ag_map_markers
            (zipcode, latitude, longitude, marker_color, order_by)
    select agl.zip, agl.latitude, agl.longitude, '00FF00', 0
    from    ag_login agl
    where   (
                SELECT  count(*)
                from    ag_kit_barcodes akb
                        inner join ag_kit ak
                        on akb.ag_kit_id = ak.ag_kit_id
                where   ak.ag_login_id = agl.ag_login_id
            ) =
            (
                SELECT  count(*)
                from    ag_kit_barcodes akb
                        inner join ag_kit ak
                        on akb.ag_kit_id = ak.ag_kit_id
                where   ak.ag_login_id = agl.ag_login_id
                        and (akb.site_sampled IS NOT NULL AND akb.site_sampled::text <> '')
            );
    
    -- Second priority: verified
    insert  into ag_map_markers
            (zipcode, latitude, longitude, marker_color, order_by)
    select  agl.zip, agl.latitude, agl.longitude, 'FFFF00', 1
    from    ag_login agl
            left join ag_map_markers mm
            on agl.zip = mm.zipcode
    where   (
                SELECT  count(*)
                from    ag_kit ak
                where   ak.ag_login_id = agl.ag_login_id
                        and kit_verified = 'y'
            ) > 0
            and coalesce(mm.zipcode::text, '') = '';
            
    -- Finally, existing participants
    insert  into ag_map_markers
            (zipcode, latitude, longitude, marker_color, order_by)
    select  agl.zip, agl.latitude, agl.longitude, '00B2FF', 2
    from    ag_login agl
            left join ag_map_markers mm
            on agl.zip = mm.zipcode
    where   coalesce(mm.zipcode::text, '') = '';

    open results_ for
        SELECT  zipcode, latitude, longitude, marker_color
        from    ag_map_markers
        order by order_by desc;
    return results_;
end;
 /*
 begin;
 select ag_get_map_markers('a');
 fetch all in a;
 commit;
 */
 
$body$
LANGUAGE PLPGSQL;





CREATE OR REPLACE FUNCTION ag_get_next_barcode (refcursor)
 RETURNS refcursor AS $body$
 
BEGIN

    open $1 for
        SELECT  barcode_seq.next_barcode
        from    (
                    SELECT  max(cast(barcode as integer)) + 1 as next_barcode
                    from    barcode
                    where   length(barcode) = 9
                            and barcode not like '9%'
                ) as barcode_seq
        order by barcode_seq.next_barcode;
        return $1;

end; 
/* BEGIN;
select ag_get_next_barcode('a');
fetch all in a;
COMMIT;
*/

$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_get_participant_exceptions (
    ag_login_id_ uuid,
    results_ refcursor
)
 RETURNS refcursor AS $body$
BEGIN

    open results_ for
        SELECT  participant_name
        from    ag_bruce_waynes
        where   ag_login_id = ag_login_id_;
    return results_;
end;
/*
begin;
select ag_get_participant_exceptions(cast ('d8592c747da12135e0408a80115d6401' as uuid), 'a'); 
fetch all in a;
commit;
*/
  
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_get_participant_samples (
    ag_login_id_ uuid,
    participant_name_ text,
    results_ refcursor
)
 RETURNS refcursor AS $body$
BEGIN

    open results_ for
        SELECT  akb.barcode, akb.site_sampled, akb.sample_date, akb.sample_time, 
                akb.notes, b.status
        from    ag_kit_barcodes akb
                inner join barcode b
                on akb.barcode = b.barcode
                inner join ag_kit ak 
                on akb.ag_kit_id = ak.ag_kit_id 
        where   (akb.site_sampled IS NOT NULL AND akb.site_sampled::text <> '')
                and ak.ag_login_id = ag_login_id_
                and akb.participant_name = participant_name_;
    return results_;            
end;
/*
begin;
select ag_get_participant_samples(cast ('d8592c747da12135e0408a80115d6401' as uuid), 'foo', 'a'); 
fetch all in a;
commit;
*/
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_get_print_results (
   kit_id_  text,
   results_ refcursor
) RETURNS refcursor AS $body$
BEGIN
  open results_ for 
  SELECT print_results from ag_handout_kits 
  where kit_id = kit_id_;
  return results_;
end;
/*
begin;
select ag_get_print_results('PGP_KBXvt', 'a');
fetch all in a;
commit;
*/

$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_get_survey_details (
    ag_login_id_ uuid,
    participant_name_ text,
    user_data_ refcursor
)
 RETURNS refcursor AS $body$
BEGIN

    open user_data_ for
        SELECT  cast(ag_login_id as varchar(100)) as ag_login_id,
                participant_name, question, answer
        from    ag_survey_answer
        where   ag_login_id = ag_login_id_ and participant_name = participant_name_;
    return user_data_;
end;
/*
begin;
select ag_get_survey_details(cast ('d8592c747da12135e0408a80115d6401' as uuid), 'foo', 'a'); 
fetch all in a;
commit;
*/
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_insert_barcode (
    ag_kit_id_ uuid, 
    barcode_ text
)
 RETURNS VOID AS $body$
BEGIN
    BEGIN
        insert into barcode (barcode) values (barcode_);
    EXCEPTION
        WHEN OTHERS THEN
            END;
    BEGIN
        insert into project_barcode (project_id, barcode) 
            values (1, barcode_);
    EXCEPTION
        WHEN OTHERS THEN
            END;        
    insert  into ag_kit_barcodes
            (ag_kit_id, barcode, sample_barcode_file)
    values  (ag_kit_id_, barcode_, barcode_ || '.jpg');
  
end;
/*
begin;
select ag_insert_barcode(cast('d8592c74-7da2-2135-e040-8a80115d6401' as uuid) ,'991299');
select * from ag_kit_barcodes where barcode = '991299';
select * from project_barcode where barcode = '991299';
select * from barcode where barcode = '991299';
delete from ag_kit_barcodes where barcode = '991299';
delete from project_barcode where barcode = '991299';
delete from barcode where barcode = '991299';
select * from ag_kit_barcodes where barcode = '991299';
select * from project_barcode where barcode = '991299';
select * from barcode where barcode = '991299';
commit;
*/ 
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_insert_bruce_wayne (
    ag_login_id_ uuid,
    participant_name_ text
)
 RETURNS VOID AS $body$
BEGIN

  insert    into ag_bruce_waynes
            (ag_login_id, participant_name)
  values    (ag_login_id_, participant_name_);
end;
/*
begin;
select ag_insert_bruce_wayne(cast('d8592c747da12135e0408a80115d6401' as uuid), 'random kid');
select * from ag_bruce_waynes where ag_login_id = cast('d8592c747da12135e0408a80115d6401' as uuid);
delete from ag_bruce_waynes where  ag_login_id = cast('d8592c747da12135e0408a80115d6401' as uuid) and participant_name = 'random kid';
select * from ag_bruce_waynes where ag_login_id = cast('d8592c747da12135e0408a80115d6401' as uuid); 
commit;
*/
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_insert_kit (
    ag_login_id_ uuid, 
    kit_id_ text, 
    kit_password_ text, 
    swabs_per_kit_ bigint, 
    kit_verification_code_ text,
    print_results_ text
)
 RETURNS VOID AS $body$
BEGIN

  insert    into ag_kit
            (ag_login_id, supplied_kit_id, kit_password, swabs_per_kit, kit_verification_code, print_results)
  values    (ag_login_id_, kit_id_, kit_password_, swabs_per_kit_, kit_verification_code_, print_results_);
 
end;
/*
begin;
select ag_insert_kit(cast('d8592c747da12135e0408a80115d6401' as uuid), 'somekit','pass', 2, 'ver', 'n');
select * from ag_kit where ag_login_id = cast('d8592c747da12135e0408a80115d6401' as uuid);
delete from ag_kit where ag_login_id = cast('d8592c747da12135e0408a80115d6401' as uuid) and supplied_kit_id = 'somekit';
select * from ag_kit where ag_login_id = cast('d8592c747da12135e0408a80115d6401' as uuid);
commit;
*/
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_insert_login (
    email_ text, 
    name_ text, 
    address_ text, 
    city_ text, 
    state_ text, 
    zip_ text, 
    country_ text
)
 RETURNS VOID AS $body$
BEGIN

  insert    into ag_login
            (email, name, address, city, state, zip, country)
  values    (email_, name_, address_, city_, state_, zip_, country_);
  

end;
/*
begin;
select ag_insert_login('deleteme@no.no', 'testkit', 'testaddr', 'testcity', 'teststate', 'testzip', 'testcountry' )
select * from ag_login where email = 'deleteme@no.no';
delete from ag_login where email = 'deleteme@no.no';
select * from ag_login where email = 'deleteme@no.no';
commit;
*/
 
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_insert_survey_answer (
  ag_login_id_ uuid,
  participant_name_ in text,
  question_ in text,
  answer_ in text
)
 RETURNS VOID AS $body$
BEGIN

  insert into ag_survey_answer
  (ag_login_id, participant_name, question, answer)

  values
  (ag_login_id_, participant_name_, question_, answer_);
end;
/*
begin;
select ag_insert_survey_answer(cast('d8592c747da12135e0408a80115d6401' as uuid), 'test', 'badquest', 'badans');
select * from ag_survey_answer where question = 'badquest';
delete from ag_survey_answer where ag_login_id = cast('d8592c747da12135e0408a80115d6401' as uuid) and participant_name = 'test' and question = 'badquest';
select * from ag_survey_answer where question = 'badquest';
commit;
*/
 
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_is_handout (
    kit_id_ text,
    password_ text
)
 RETURNS char AS $body$
DECLARE
    is_handout_ char;
    cnt bigint;

BEGIN

    is_handout_ := 'n';

    select  count(*) into cnt
    from    ag_handout_kits
    where   kit_id = kit_id_
            and password = password_;
            
    if (cnt > 0)
    then
        is_handout_ := 'y';
    end if;   
    return is_handout_; 

end;
 /*
 begin;
 select ag_is_handout('test', 'wrongpass');
 commit;
 */
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_log_participant_sample (
    barcode_ text,
    sample_site_ text,
    environment_sampled_ text,
    sample_date_ text,
    sample_time_ text,
    participant_name_ text,
    notes_ text
)
 RETURNS VOID AS $body$
BEGIN

    update  ag_kit_barcodes
    set     site_sampled = sample_site_,
            environment_sampled = environment_sampled_,
            sample_date = sample_date_,
            sample_time = sample_time_,
            participant_name = participant_name_,
            notes = notes_
    where   barcode = barcode_;
end;
/*
begin;
select ag_log_participant_sample('000010860', 'Stool', '', '07/29/2014', '09:30 AM', 'Emily', 'no notes');
select * from ag_kit_barcodes where barcode = ('000010860');
select ag_delete_sample ('000010860', cast('d8592c747da12135e0408a80115d6401' as uuid));
select * from ag_kit_barcodes where barcode = '000010860';
commit;
*/
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_reassign_barcode (
    ag_kit_id_ uuid,
    barcode_ text
)
 RETURNS VOID AS $body$
BEGIN

    update  ag_kit_barcodes
    set     ag_kit_id = ag_kit_id_
    where   barcode = barcode_;
end;
/*
begin;
test = "d8592c74-7da2-2135-e040-8a80115d6401"
1111 = "dbd466b5-651b-bfb2-e040-8a80115d6775"
select ag_reassign_barcode(cast ('dbd466b5-651b-bfb2-e040-8a80115d6775' as uuid), '000010860');
select ag_get_barcodes_by_kit('1111', 'a');
fetch all in a;
select ag_reassign_barcode(cast ('d8592c74-7da2-2135-e040-8a80115d6401' as uuid), '000010860');
select ag_get_barcodes_by_kit('test', 'a');
fetch all in a;
commit;
*/ 
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_set_pass_change_code (
  email_ in text, 
  kit_id_ in text,  
  pass_code_ in text
)  RETURNS VOID AS $body$
BEGIN
  update ag_kit set pass_reset_code = pass_code_, pass_reset_time = clock_timestamp() + interval '2' hour where
     supplied_kit_id = kit_id_ and ag_login_id in (select ag_login_id from ag_login where email = email_);
end;


/*
select ag_set_pass_change_code('test@microbio.me','test', '123456789');

execute ag_set_pass_change_code('test@microbio.me','test', '123456789');
*/
 
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_stats (
    results_ refcursor
)
 RETURNS refcursor AS $body$
BEGIN
    
    open results_ for
        SELECT  ' General stats - Total surveys: ', count(*)
        from    ag_human_survey
        union
        SELECT  ' General stats - Total Kits: ', count(*)
        from    ag_kit
        union
        SELECT  ' General stats: Total barcodes: ', count(*)
        from    ag_kit_barcodes
        union
        SELECT  ' General stats - average age: ', avg((current_date - to_date(birth_date, 'MM/DD/YYYY')) / 365.0) as avg_age
        from    ag_human_survey
        where   (birth_date IS NOT NULL AND birth_date::text <> '')
        union
        SELECT  ' General stats: Avg. height: ', avg(cast(height_in as numeric))
        from    ag_human_survey
        where   (height_in IS NOT NULL AND height_in::text <> '')
                and cast(height_in as numeric) > 30
        union
        SELECT  'Diet type - Vegetarians:', count(diet_type)
        from    ag_human_survey
        where   diet_type = 'Vegetarian'
        union
        SELECT  'Diet type - Vegetarian but eat seafood: ', count(diet_type)
        from    ag_human_survey
        where   diet_type = 'Vegetarian but eat seafood'
        union
        SELECT  'Diet type - Omnivore but no red meat: ', count(diet_type)
        from    ag_human_survey
        where   diet_type = 'Omnivore but no red meat'
        union
        SELECT  'Diet type - Omnivore: ', count(diet_type)
        from    ag_human_survey
        where   diet_type = 'Omnivore'
        union
        SELECT  'Diet type - Vegan: ', count(diet_type)
        from    ag_human_survey
        where   diet_type = 'Vegan'
        union
        SELECT  'Diet type - Did not answer: ', count(diet_type)
        from    ag_human_survey
        where   coalesce(diet_type::text, '') = ''
        union
        SELECT  'Gender - Female: ', count(*)
        from    ag_human_survey
        where   gender = 'Female'
        union
        SELECT  'Gender - Male: ', count(*)
        from    ag_human_survey
        where   gender = 'Male'
        union
        SELECT  'BMI - Underweight: ', count(*)
        from    ag_human_survey
        where   (weight_lbs IS NOT NULL AND weight_lbs::text <> '')
                and cast(weight_lbs as numeric) > 50
                and (height_in IS NOT NULL AND height_in::text <> '')
                and cast(height_in as numeric) > 30
                and (cast(weight_lbs as numeric) / ((cast(height_in as numeric) * cast(height_in as numeric)))) * 703 < 18.5
        union
        SELECT  'BMI - Normal: ', count(*)
        from    ag_human_survey
        where   (weight_lbs IS NOT NULL AND weight_lbs::text <> '')
                and cast(weight_lbs as numeric) > 50
                and (height_in IS NOT NULL AND height_in::text <> '')
                and cast(height_in as numeric) > 30
                and (cast(weight_lbs as numeric) / ((cast(height_in as numeric) * cast(height_in as numeric)))) * 703 between 18.5 and 24.9
        union
        SELECT  'BMI - Overweight: ', count(*)
        from    ag_human_survey
        where   (weight_lbs IS NOT NULL AND weight_lbs::text <> '')
                and cast(weight_lbs as numeric) > 50
                and (height_in IS NOT NULL AND height_in::text <> '')
                and cast(height_in  as numeric) > 30
                and (cast(weight_lbs as numeric) / ((cast(height_in as numeric) * cast(height_in as numeric)))) * 703 between 25 and 29.9
        union
        SELECT  'BMI - Obesity: ', count(*)
        from    ag_human_survey
        where   (weight_lbs IS NOT NULL AND weight_lbs::text <> '')
                and cast(weight_lbs as numeric) > 50
                and (height_in IS NOT NULL AND height_in::text <> '')
                and cast(height_in as numeric) > 30
                and (cast(weight_lbs as numeric) / ((cast(height_in as numeric) * cast(height_in as numeric)))) * 703 > 30
        union
        SELECT  'Antibiotic - Did not answer: ', count(*)
        from    ag_human_survey
        where   coalesce(antibiotic_select::text, '') = ''
        
        union
        SELECT  'Antibiotic - In the past week: ', count(*)
        from    ag_human_survey
        where   antibiotic_select = 'In the past week'
        union
        SELECT  'Antibiotic - In the past year: ', count(*)
        from    ag_human_survey
        where   antibiotic_select = 'In the past year'
        union
        SELECT  'Antibiotic - Not in the last year: ', count(*)
        from    ag_human_survey
        where   antibiotic_select = 'Not in the last year'
        union
        SELECT  'Antibiotic - In the past month: ', count(*)
        from    ag_human_survey
        where   antibiotic_select = 'In the past month'
        union
        SELECT  'Antibiotic - In the past 6 months: ', count(*)
        from    ag_human_survey
        where   antibiotic_select = 'In the past 6 months';
    return results_;
end;
/*
being;
select ag_stats('a');
fetch all in a;
commit;
*/

$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_update_barcode (
    barcode_ in text,
    ag_kit_id_ in uuid, 
    site_sampled_ in text, 
    environment_sampled_ in text, 
    sample_date_ in text, 
    sample_time_ in text, 
    participant_name_ in text, 
    notes_ in text
)
 RETURNS VOID AS $body$
BEGIN

    update  ag_kit_barcodes
    set     ag_kit_id = ag_kit_id_,
            site_sampled = site_sampled_,
            environment_sampled = environment_sampled_,
            sample_date = sample_date_,
            sample_time = sample_time_,
            participant_name = participant_name_,
            notes = notes_
    where   barcode = barcode_; 

end;
/*
begin;
select ag_update_barcode('000010860', cast ('d8592c74-7da2-2135-e040-8a80115d6401' as uuid), 'Stool', '', '07/30/2014', '9:30 AM', 'test', '');
select * from ag_kit_barcodes where barcode = '000010860';
select ag_update_barcode('000010860', cast ('d8592c74-7da2-2135-e040-8a80115d6401' as uuid), '', '', '', '', '', '');
select * from ag_kit_barcodes where barcode = '000010860';
commit;
*/
 
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_update_geo_info (
    ag_login_id_ uuid,
    lat_ double precision,
    lon_ double precision,
    elevation_ double precision,
    cannot_geocode_ char
)
 RETURNS VOID AS $body$
BEGIN

    update  ag_login
    set     latitude = lat_,
            longitude = lon_,
            elevation = elevation_,
            cannot_geocode = cannot_geocode_
    where   ag_login_id = ag_login_id_;

end;
 /*
 lat = 40.0005378
 long = -105.2077798
 elevation = 1619.83715820312
 begin;
select ag_update_geo_info(cast('d8592c747da12135e0408a80115d6401' as uuid), 54.2, 32.64, 200.535633, 'n');
select * from ag_login where ag_login_id = cast('d8592c747da12135e0408a80115d6401' as uuid);
select ag_update_geo_info(cast('d8592c747da12135e0408a80115d6401' as uuid), 40.0005378, -105.2077798, 1619.83715820312, null);
select * from ag_login where ag_login_id = cast('d8592c747da12135e0408a80115d6401' as uuid);
 commit;
 */
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_update_kit (
    ag_kit_id_ uuid,
    supplied_kit_id_ text, 
    kit_password_ text, 
    swabs_per_kit_ bigint, 
    kit_verification_code_ text
)
 RETURNS VOID AS $body$
BEGIN

    update  ag_kit
    set     supplied_kit_id = supplied_kit_id_,
            kit_password = kit_password_,
            swabs_per_kit = swabs_per_kit_,
            kit_verification_code = kit_verification_code_
    where   ag_kit_id = ag_kit_id_; 

end;
 /*
 look up oldpassword!!!
begin;
select ag_update_kit (cast('d8592c74-7da2-2135-e040-8a80115d6401' as uuid), 'test22', 'newpass', 24, 'ver');
select * from ag_kit where ag_kit_id = 'd8592c74-7da2-2135-e040-8a80115d6401';
select ag_update_kit (cast('d8592c74-7da2-2135-e040-8a80115d6401' as uuid), 'test', 'oldpass', 1, 'test');
select * from ag_kit where ag_kit_id = 'd8592c74-7da2-2135-e040-8a80115d6401';
commit;
*/
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_update_kit_password (
  KIT_ID_ IN text 
, PASS_ IN text 
)  RETURNS VOID AS $body$
BEGIN
  UPDATE AG_KIT  set kit_password = PASS_, pass_reset_code = null
  where supplied_kit_id = KIT_ID_;  
END;
 /*
 lookup old password
begin;
select ag_update_kit_password('test', 'newpass');
select * from ag_kit where supplied_kit_id = 'test';
select ag_update_kit_password('test', 'oldpass');
select * from ag_kit where supplied_kit_id = 'test';
commit;
*/

$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_update_login (
    ag_login_id_ uuid,
    email_ text, 
    name_ text, 
    address_ text, 
    city_ text, 
    state_ text, 
    zip_ text, 
    country_ text
)
 RETURNS VOID AS $body$
BEGIN

    update  ag_login
    set     email = email_,
            name = name_,
            address = address_,
            city = city_,
            state = state_,
            zip = zip_,
            country = country_
    where   ag_login_id = ag_login_id_;
end;
 /*
begin;
select ag_update_login(cast('d8592c747da12135e0408a80115d6401' as uuid), 'chagned@chaged.com', '','add', 'city', 'state', 'zip', 'USA');
select * from ag_login where ag_login_id = cast('d8592c747da12135e0408a80115d6401' as uuid);
select ag_update_login(cast('d8592c747da12135e0408a80115d6401' as uuid), 'test@microbio.me', 'Test','Test', 'Boulder', 'CO', '80303', 'United States');
select * from ag_login where ag_login_id = cast('d8592c747da12135e0408a80115d6401' as uuid);
)
commit;
*/
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_verify_kit_status (
  -- define the input to this procedure
  supplied_kit_id_ IN text
)
 RETURNS VOID AS $body$
BEGIN
  UPDATE AG_KIT
  SET KIT_VERIFIED='y'
  WHERE SUPPLIED_KIT_ID=supplied_kit_id_;
end;
 /*
begin;
update ag_kit set kit_verified = 'n' where supplied_kit_id = 'test';
select ag_verify_kit_status('test');
select * from ag_kit where supplied_kit_id = 'test';
commit;
*/
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION ag_verify_password_change_code (
   email_ text,
   kitid_ text,
   pass_code_ text
)
 RETURNS integer AS $body$
DECLARE
    results_ refcursor;
    current_time_ timestamp(6) := clock_timestamp();
    is_valid_ integer;  
    rec RECORD;
   

BEGIN
open results_ for
select k.PASS_RESET_TIME
from ag_kit k inner join ag_login l on l.AG_LOGIN_ID = k.AG_LOGIN_ID
        where k.PASS_RESET_CODE = pass_code_ and l.EMAIL = email_  and k.SUPPLIED_KIT_ID = kitid_;
Fetch results_ into rec;
IF NOT FOUND THEN 
    is_valid_ = 0;
ELSE
    IF (current_time_ < cast(rec.PASS_RESET_TIME as timestamp)) then
        is_valid_ = 1;
    ELSE
        is_valid_ = 0;
    END IF;
END IF;
return is_valid_;

end;
 
/*
begin;
select  ag_verify_password_change_code('test@microbio.me', 'test', '123456789');
commit;
*/
 
 
$body$
LANGUAGE PLPGSQL;



--Do we actually use this table?  There are only 13 rows and none of
--the data makes any sense
CREATE OR REPLACE FUNCTION american_gut_consent_submit (
  participant_name_ in text,
  contact_code_ in text,
  is_7_to_13_ in text,
  parent_1_name_ in text,
  parent_2_name_ in text,
  parent_1_code_ in text,
  parent_2_code_ in text,
  deceased_parent_ in text
)
 RETURNS VOID AS $body$
BEGIN

    insert  into american_gut_consent  
            (participant_name, contact_code,is_7_to_13, parent_1_name,
            parent_2_name, parent_1_code, parent_2_code, deceased_parent)
    values  (participant_name_, contact_code_,is_7_to_13_, parent_1_name_,
            parent_2_name_, parent_1_code_, parent_2_code_, deceased_parent_);

end;
/*
begin;
select american_gut_consent_submit('testkid', 'test', 'n', 'test', 'test','','','n');
select * from american_gut_consent where participant_name = 'testkid';
delete from american_gut_consent where participant_name = 'testkid';
select * from american_gut_consent where participant_name = 'testkid';
commit;
*/

$body$
LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION get_barcode_proj_type (
   barcode_ text,
   proj_type_ refcursor
)
 RETURNS refcursor AS $body$
BEGIN

    open proj_type_ for
        SELECT  p.project
        from    project_barcode pb
                inner join project p
                on pb.project_id = p.project_id
        where   pb.barcode = barcode_;
    return proj_type_;
end;
/*
begin;
select get_barcode_proj_type('000001516', 'a');
fetch all in a;
commit;
*/
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION get_project_names ( 
proj_names_ refcursor
) RETURNS refcursor AS $body$
BEGIN
  open proj_names_ for 
    SELECT project from project;
  return proj_names_;
end;
/*
begin;
select get_project_names('a');
fetch all in a;
commit;
*/

$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION set_barcode_proj_type (
  project_ in text
, barcode_ in text 
)  RETURNS VOID AS $body$
DECLARE
 
  project_code bigint;


BEGIN
  select project_id into project_code from project where project = project_;
  update project_barcode set project_id = project_code where barcode = barcode_;
end;
/*
begin;
select set_barcode_proj_type('American Gut Handout kit' , '000000001');
select * from  project_barcode where barcode = '000000001';
select set_barcode_proj_type('American Gut Project' , '000000001');
select * from  project_barcode where barcode = '000000001';
commit;
*/

$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION update_akb (
    barcode_ text,
    moldy_ char,
    overloaded_ char,
    other_ char,
    other_text_ text,
    date_ text
)
 RETURNS VOID AS $body$
BEGIN

    update  ag_kit_barcodes
    set     moldy = moldy_,
            overloaded = overloaded_,
            other = other_,
            other_text = other_text_,
            date_of_last_email = date_
    where   barcode = barcode_;
end;
 /*
begin;
select update_akb('000010860', 'n', 'n', 'y', 'some other text', '07/30/2014');
select * from ag_kit_barcodes where barcode = '000010860';
select update_akb('000010860', null, null, null, null, null);
select * from ag_kit_barcodes where barcode = '000010860';
commit;
*/
 
$body$
LANGUAGE PLPGSQL;




CREATE OR REPLACE FUNCTION update_barcode_status (
    status_ text,
    postmark_ text,
    scan_date_ text,
    barcode_ text
)
 RETURNS VOID AS $body$
BEGIN

    update  barcode
    set     status = status_,
            sample_postmark_date = postmark_,
            scan_date = scan_date_
    where   barcode = barcode_;
end;
/*
begin;
select update_barcode_status ('Received', '07/27/2014', '07/30/2014', '000010860');
select * from barcode where barcode = '000010860';
select update_barcode_status (null, null, null, '000010860');
select * from barcode where barcode = '000010860';
commit;
*/

 
$body$
LANGUAGE PLPGSQL;


